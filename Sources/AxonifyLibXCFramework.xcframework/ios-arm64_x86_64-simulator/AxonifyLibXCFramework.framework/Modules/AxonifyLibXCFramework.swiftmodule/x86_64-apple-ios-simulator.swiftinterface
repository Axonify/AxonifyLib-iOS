// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AxonifyLibXCFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import CoreTelephony
import Foundation
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class TenantService {
  public init()
  public func parseTenantString(tenantString: Swift.String) -> Swift.Bool
  public func parseUrlString(urlString: Swift.String) -> Swift.Bool
  public func getUrlStringForTraining() -> Swift.String?
  @objc deinit
}
extension AxonifyLibXCFramework.TenantService : Swift.Equatable {
  public static func == (lhs: AxonifyLibXCFramework.TenantService, rhs: AxonifyLibXCFramework.TenantService) -> Swift.Bool
}
public protocol AxonifyAuthenticationDelegate : AnyObject {
  typealias Tokens = (access: Swift.String, id: Swift.String?)
  func authenticate(sender: AxonifyLibXCFramework.AxonifyWebViewController, identityProvider: AxonifyLibXCFramework.IdentityProvider, completion: @escaping ((Swift.Result<Self.Tokens, any Swift.Error>) -> Swift.Void))
  func clearAuthState(sender: AxonifyLibXCFramework.AxonifyWebViewController)
}
public protocol AxonifyWebViewControllerDelegate : AnyObject {
  func readyToLoad(sender: AxonifyLibXCFramework.AxonifyWebViewController)
  func authenticationRequired(sender: AxonifyLibXCFramework.AxonifyWebViewController)
  func axonifyError(sender: AxonifyLibXCFramework.AxonifyWebViewController, error: AxonifyLibXCFramework.AxonifyError)
}
public protocol AxonifyMultiTenantDelegate : AnyObject {
  func resetApp(sender: AxonifyLibXCFramework.AxonifyWebViewController)
}
public protocol AxonifyAppReviewDelegate : AnyObject {
  func showReviewMobileApp(sender: AxonifyLibXCFramework.AxonifyWebViewController)
}
@objc @_Concurrency.MainActor @preconcurrency public class AxonifyWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AxonifyLibXCFramework.AxonifyWebViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var authenticationDelegate: (any AxonifyLibXCFramework.AxonifyAuthenticationDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var pushNotificationDelegate: (any AxonifyLibXCFramework.AxonifyPushNotificationDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var multiTenantDelegate: (any AxonifyLibXCFramework.AxonifyMultiTenantDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var appReviewDelegate: (any AxonifyLibXCFramework.AxonifyAppReviewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var splashScreenColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public init(delegate: (any AxonifyLibXCFramework.AxonifyWebViewControllerDelegate)? = nil, authenticationDelegate: (any AxonifyLibXCFramework.AxonifyAuthenticationDelegate)? = nil, pushNotificationDelegate: (any AxonifyLibXCFramework.AxonifyPushNotificationDelegate)? = nil, multiTenantDelegate: (any AxonifyLibXCFramework.AxonifyMultiTenantDelegate)? = nil, appReviewDelegate: (any AxonifyLibXCFramework.AxonifyAppReviewDelegate)? = nil, splashScreenColor: UIKit.UIColor = .black, options: [Swift.String : Any]? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadAxonify(withURL url: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func loadAxonify(withTenantId tenantId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func loadAxonify(withSecret secret: Swift.String, employeeId: Swift.String, tenantId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func loadAxonify(withSecret secret: Swift.String, employeeId: Swift.String, timeStamp: Swift.Double, tenantId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func loadAxonify(withAuthToken token: Swift.String, employeeId: Swift.String, timeStamp: Swift.Double, tenantId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func logMessage(message: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func clearAppData(reset: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func appDidBecomeActive()
  @_Concurrency.MainActor @preconcurrency public func appWillResignActive()
  @_Concurrency.MainActor @preconcurrency public func getViewController() -> UIKit.UIViewController
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (AxonifyLibXCFramework.Reachability) -> ()
  public typealias NetworkUnreachable = (AxonifyLibXCFramework.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: AxonifyLibXCFramework.Reachability.NetworkStatus, b: AxonifyLibXCFramework.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: AxonifyLibXCFramework.Reachability.Connection, b: AxonifyLibXCFramework.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: AxonifyLibXCFramework.Reachability.NetworkReachable?
  public var whenUnreachable: AxonifyLibXCFramework.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: AxonifyLibXCFramework.Reachability.Connection {
    get
  }
  public var connection: AxonifyLibXCFramework.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension AxonifyLibXCFramework.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct IdentityProvider : Swift.Hashable {
  public let endpoint: AxonifyLibXCFramework.IdentityProvider.Endpoint
  public let clientId: Swift.String
  public let redirect: Foundation.URL
  public let scopes: [Swift.String]
  public let prompt: Swift.String?
  public let name: Swift.String
  public init(name: Swift.String, endpoint: AxonifyLibXCFramework.IdentityProvider.Endpoint, clientId: Swift.String, redirect: Foundation.URL, scopes: [Swift.String], prompt: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AxonifyLibXCFramework.IdentityProvider, b: AxonifyLibXCFramework.IdentityProvider) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AxonifyLibXCFramework.IdentityProvider {
  @frozen public enum Endpoint : Swift.Hashable {
    case discovery(Foundation.URL)
    case fixed(authorization: Foundation.URL, token: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: AxonifyLibXCFramework.IdentityProvider.Endpoint, b: AxonifyLibXCFramework.IdentityProvider.Endpoint) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol AxonifyPushNotificationDelegate : AnyObject {
  func getDeviceToken(sender: AxonifyLibXCFramework.AxonifyWebViewController) -> Foundation.Data?
  func getAndClearNotificationData(sender: AxonifyLibXCFramework.AxonifyWebViewController) -> Any?
}
public enum AxonifyError : Swift.Error {
  case badURL
  case malformedURL
  case loadTimeout
  case subSystem(code: Swift.Int, subCode: Swift.Int, description: Swift.String?)
}
extension AxonifyLibXCFramework.AxonifyError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
extension AxonifyLibXCFramework.AxonifyError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@available(*, unavailable, renamed: "Connection")
extension AxonifyLibXCFramework.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension AxonifyLibXCFramework.Reachability.NetworkStatus : Swift.Hashable {}
extension AxonifyLibXCFramework.Reachability.Connection : Swift.Equatable {}
extension AxonifyLibXCFramework.Reachability.Connection : Swift.Hashable {}
extension AxonifyLibXCFramework.IdentityProvider.Endpoint : Swift.Sendable {}
